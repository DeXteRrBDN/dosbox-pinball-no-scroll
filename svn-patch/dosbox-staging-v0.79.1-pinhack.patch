diff -ru dosbox-staging-orig/include/pinhacks.h dosbox-staging/include/pinhacks.h
--- dosbox-staging-orig/include/pinhacks.h      2022-06-17 14:34:47.047090178 +0200
+++ dosbox-staging/include/pinhacks.h   2022-06-17 14:31:36.392623908 +0200
@@ -0,0 +1,25 @@
+/*
+ * Copyleft:
+ * This file was made to be used with DOSBOX, and so
+ * is under GNU general public license
+ */
+
+#ifndef __DOSBOX_PINHACK_H
+#define __DOSBOX_PINHACK_H
+#define PINHACKVERSION 3 
+
+extern struct scrollhack {
+       bool enabled,trigger;
+       struct { 
+               int min, max;
+       }triggerwidth,triggerheight;
+       struct {int height, width;} expand;
+       struct {struct { bool enabled,trigger;}
+               psychopinball,
+               pinballdreams;
+       }specifichack;
+       const char * doublewidth;
+}pinhack ;
+  
+#endif /* __DOSBOX_PINHACK_H */
+
diff -ru dosbox-staging-orig/src/dos/dos_files.cpp dosbox-staging/src/dos/dos_files.cpp
--- dosbox-staging-orig/src/dos/dos_files.cpp	2022-10-26 08:58:08.208608123 +0200
+++ dosbox-staging/src/dos/dos_files.cpp	2022-10-26 08:49:41.841999296 +0200
@@ -32,6 +32,8 @@
 #include "cross.h"
 #include "string_utils.h"
 #include "support.h"
+#include "pinhacks.h"
+
 
 #define DOS_FILESTART 4
 
@@ -531,6 +533,11 @@
 	if (flags>2) LOG(LOG_FILES,LOG_ERROR)("Special file open command %X file %s",flags,name);
 	else LOG(LOG_FILES,LOG_NORMAL)("file open command %X file %s",flags,name);
 
+        if ( pinhack.enabled && pinhack.specifichack.pinballdreams.enabled ) {
+                if ( !strcmp(name,"flippers.spr") ) { printf("PINHACK: pinhackpd: flippers.spr loaded, hack should trigger on next resolution change.\n");
+                pinhack.specifichack.pinballdreams.trigger=true; };
+        }
+
 	uint16_t attr = 0;
 	uint8_t devnum = DOS_FindDevice(name);
 	bool device = (devnum != DOS_DEVICES);
diff -ru dosbox-staging-orig/src/dosbox.cpp dosbox-staging/src/dosbox.cpp
--- dosbox-staging-orig/src/dosbox.cpp	2022-10-26 08:58:59.365275994 +0200
+++ dosbox-staging/src/dosbox.cpp	2022-10-26 08:52:43.400368468 +0200
@@ -53,6 +53,8 @@
 #include "timer.h"
 #include "tracy.h"
 #include "video.h"
+#include "pinhacks.h"
+
 
 bool shutdown_requested = false;
 MachineType machine;
@@ -142,6 +144,21 @@
 	// do nothing
 }
 
+scrollhack pinhack;
+
+void parsetriggerrange (const char*&range,int &min, int &max, char delim) { // PINHACK stuff
+       char* range_delim = const_cast<char*>(strchr(range,delim));
+               if(range_delim && * range_delim) {
+                       min = atoi(range);
+                       max = atoi(range_delim+1);
+               }
+               else if (!range_delim) { // single value given
+                       max =  min = atoi(range);
+               }
+}
+
+
+
 static Bitu Normal_Loop() {
 	Bits ret;
 	while (1) {
@@ -408,6 +425,32 @@
 	VGA_SetRatePreference(section->Get_string("dos_rate"));
 }
 
+static void PINHACK_Init(Section * sec) {
+       Section_prop * section=static_cast<Section_prop *>(sec);
+       /* PINHACK config file parsing */
+       pinhack.enabled=(section->Get_bool("pinhack"));
+       const char* pinhacktriggerwidthrange=section->Get_string("pinhacktriggerwidth");
+       const char* pinhacktriggerheightrange=section->Get_string("pinhacktriggerheight");
+       pinhack.doublewidth=section->Get_string("pinhackdoublewidth");
+       pinhack.expand.height=(section->Get_int("pinhackexpandheight"));
+       pinhack.expand.width=(section->Get_int("pinhackexpandwidth"));
+       parsetriggerrange ( pinhacktriggerheightrange, pinhack.triggerheight.min, pinhack.triggerheight.max, '-' );
+       parsetriggerrange ( pinhacktriggerwidthrange, pinhack.triggerwidth.min, pinhack.triggerwidth.max, '-' );
+       if ( ( pinhack.triggerwidth.min == 0 ) && ( pinhack.triggerwidth.max == 0 ) ) pinhack.triggerwidth.max=9999;
+       printf("PINHACK: Your DOSBox has been hacked with pinball hacks V %d ",PINHACKVERSION);
+       if (pinhack.enabled) {
+               printf("and enabled in your config file!\n");
+               printf("PINHACK: width settings: trigger at:");
+               printf("%d-%d, expand to %d\n",pinhack.triggerwidth.min, pinhack.triggerwidth.max,pinhack.expand.width);
+               printf("PINHACK: height settings: trigger at:");
+               printf("%d-%d, expand to %d\n",pinhack.triggerheight.min, pinhack.triggerheight.max,pinhack.expand.height);
+               printf("PINHACK: doublewidth: %s\n",pinhack.doublewidth);
+       }
+       else printf("but disabled in your config file!\n");
+       pinhack.specifichack.pinballdreams.enabled=(section->Get_bool("pinhackpd"));
+}
+
+
 // Returns decimal seconds of elapsed uptime.
 // The first call starts the uptime counter (and returns 0.0 seconds of uptime).
 double DOSBOX_GetUptime()
@@ -443,6 +486,41 @@
 	                          "svga_paradise", "vesa_nolfb",
 	                          "vesa_oldvbe",   0};
 
+       // PINHACK: pinhack config file section
+
+       secprop=control->AddSection_prop("pinhack",&PINHACK_Init, true);
+
+       Pbool = secprop->Add_bool("pinhack",Property::Changeable::Always,false);
+       Pbool->Set_help("Boolean: Enable pinball hacks to display whole table at once. Not enabled per default.");
+
+       Pstring = secprop->Add_string("pinhacktriggerwidth",Property::Changeable::Always,"0");
+       Pstring->Set_help("The X resolution (width) the pinball hack should trigger at. It is not checked by default or if set to 0. Can be a range.");
+
+       Pstring = secprop->Add_string("pinhacktriggerheight",Property::Changeable::Always,"350");
+       Pstring->Set_help("The Y resolution (height) the pinball hack should trigger at. Default is 350 (good for Pinball Fantasies). Can be a range.");
+
+       Pint = secprop->Add_int("pinhackexpandwidth",Property::Changeable::Always,0);
+       Pint->SetMinMax(0,4000);
+       Pint->Set_help("The X resolution (width) DOSBox will expand to if pinball hack is enabled and triggers.\n"
+                       "Not very useful probably, but provided here in case someone finds a game where it is useful!");
+
+       Pint = secprop->Add_int("pinhackexpandheight",Property::Changeable::Always,608);
+       Pint->SetMinMax(1,4000);
+       Pint->Set_help("The Y resolution (height) DOSBox will expand to if pinball hack is enabled and triggers.");
+
+       Pbool = secprop->Add_bool("pinhackpd",Property::Changeable::Always,false);
+       Pbool->Set_help("Boolean: Enable pinball dreams to work correctly during intros. Default:false\n");
+
+       Pbool = secprop->Add_bool("pinhackpsycho",Property::Changeable::Always,false);
+       Pbool->Set_help("Boolean: Psycho Pinball tilt craphics are messed up if hack enabled. TODO, this is a placeholder and has no function currently.");
+
+       Pstring = secprop->Add_string("pinhackdoublewidth",Property::Changeable::Always,"normal");
+       Pstring->Set_help("Used to enable forcing (or disabling) doublewidth with pinhack. The original patch disabled it,\n"
+                       "but you may find it better enabled, or left to decide by dosbox and use aspect ratio correction insread.\n"
+                       "normal=do not touch the setting, let DOSBox decide. yes=doublewidth. no=no doublewidth");
+
+// PINHACK: end config file section
+
 	secprop = control->AddSection_prop("dosbox", &DOSBOX_RealInit);
 	pstring = secprop->Add_string("language", always, "");
 	pstring->Set_help(
diff -ru dosbox-staging-orig/src/hardware/vga_crtc.cpp dosbox-staging/src/hardware/vga_crtc.cpp
--- dosbox-staging-orig/src/hardware/vga_crtc.cpp	2022-10-26 08:58:08.224608332 +0200
+++ dosbox-staging/src/hardware/vga_crtc.cpp	2022-10-26 09:08:33.904779167 +0200
@@ -25,6 +25,8 @@
 #include "cpu.h"
 #include "video.h"
 #include "pic.h"
+#include "pinhacks.h"
+
 
 #define crtc(blah) vga.crtc.blah
 
@@ -195,17 +197,27 @@
 		*/
 		break;
 	case 0x0C:	/* Start Address High Register */
-		crtc(start_address_high)=val;
-		vga.config.display_start=(vga.config.display_start & 0xFF00FF)| (val << 8);
+		if (pinhack.trigger) {
+                        crtc(start_address_high)=0;
+                        vga.config.display_start=(vga.config.display_start & 0xFF00FF)| (0 << 8);
+		} else {
+			crtc(start_address_high)=val;
+			vga.config.display_start=(vga.config.display_start & 0xFF00FF)| (val << 8);
+		}
 		/* 0-7  Upper 8 bits of the start address of the display buffer */
 		break;
 	case 0x0D:	/* Start Address Low Register */
-		crtc(start_address_low)=val;
-		vga.config.display_start=(vga.config.display_start & 0xFFFF00)| val;
+		if (pinhack.trigger) {
+                        crtc(start_address_low)=0;
+                        vga.config.display_start=(vga.config.display_start & 0xFFFF00)| 0;
+		} else {
+			crtc(start_address_low)=val;
+			vga.config.display_start=(vga.config.display_start & 0xFFFF00)| val;
+		}
 		/*	0-7	Lower 8 bits of the start address of the display buffer */
 		break;
 	case 0x0E:	/*Cursor Location High Register */
-		crtc(cursor_location_high)=val;
+		crtc(cursor_location_high)=0;
 		vga.config.cursor_start&=0xff00ff;
 		vga.config.cursor_start|=val << 8;
 		/*	0-7  Upper 8 bits of the address of the cursor */
diff -ru dosbox-staging-orig/src/hardware/vga_draw.cpp dosbox-staging/src/hardware/vga_draw.cpp
--- dosbox-staging-orig/src/hardware/vga_draw.cpp	2022-10-26 08:58:08.228608383 +0200
+++ dosbox-staging/src/hardware/vga_draw.cpp	2022-10-26 09:04:36.429677372 +0200
@@ -28,6 +28,8 @@
 #include "render.h"
 #include "../gui/render_scalers.h"
 #include "vga.h"
+#include "pinhacks.h"
+#include <cstdio>
 #include "video.h"
 
 //#undef C_DEBUG
@@ -841,6 +843,8 @@
 			vga.draw.address+=vga.draw.address_add;
 		}
 		++vga.draw.lines_done;
+  	        if (pinhack.trigger == false) {
+
 		if (vga.draw.split_line==vga.draw.lines_done) {
 #ifdef VGA_KEEP_CHANGES
 			VGA_ChangesEnd( );
@@ -850,6 +854,7 @@
 			vga.changes.start = vga.draw.address >> VGA_CHANGE_SHIFT;
 #endif
 		}
+		}
 	}
 	if (--vga.draw.parts_left) {
 		PIC_AddEvent(VGA_DrawPart, vga.draw.delay.parts,
@@ -1795,6 +1800,26 @@
 			height/=2;
 		}
 	}
+        if (pinhack.enabled) {    // Enabled in config?
+        printf("PINHACK: "); // Check for tirggering preconditions...
+        if ( ( !pinhack.specifichack.pinballdreams.enabled || pinhack.specifichack.pinballdreams.trigger ) &&
+             ( height>=pinhack.triggerheight.min && height<=pinhack.triggerheight.max ) &&
+             ( pinhack.triggerwidth.min<=width && width<=pinhack.triggerwidth.max ) ) {
+               printf("triggered -> ");
+               pinhack.trigger = true;
+               printf("original geometry: %dx%d. expanding to geometry: %dx%d.\n",width,height,
+                       pinhack.expand.width ? pinhack.expand.width : width,
+                       pinhack.expand.height ? pinhack.expand.height : height);
+               // If width or height not set, do not expand!
+               if ( pinhack.expand.height ) height = pinhack.expand.height;
+               if ( pinhack.expand.width ) width = pinhack.expand.width;
+               if ( pinhack.specifichack.pinballdreams.trigger ) pinhack.specifichack.pinballdreams.trigger=false; // On next resolution change, return to normal
+        } else {
+               pinhack.trigger = false;
+               printf("trigger values evalueted but not triggered! Current resolution: %dx%d\n",width,height);
+        };
+ }
+
 	vga.draw.lines_total=height;
 	vga.draw.parts_lines=vga.draw.lines_total/vga.draw.parts_total;
 	vga.draw.line_length = width * ((bpp + 1) / 8);
@@ -1842,6 +1867,12 @@
 
 		vga.draw.width = width;
 		vga.draw.height = height;
+        if ( pinhack.trigger ) {
+                if ( pinhack.doublewidth == "yes" ) doublewidth=true;
+                if ( pinhack.doublewidth == "no" ) doublewidth=false;
+                printf("PINHACK: Doublewidth: %s\n",pinhack.doublewidth);
+        }
+
 		vga.draw.doublewidth = doublewidth;
 		vga.draw.doubleheight = doubleheight;
 		vga.draw.aspect_ratio = aspect_ratio;

